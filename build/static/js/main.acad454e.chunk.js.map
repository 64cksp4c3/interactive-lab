{"version":3,"sources":["Labs/Three/MyCanvas.tsx","Labs/States/ZustandStore/Slices/CounterDictSlice.ts","Labs/States/ZustandStore/useStoreZustand.ts","Labs/States/ZustandStore/ZustandLab.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyCanvas","useState","v","setV","canvas","useRef","useEffect","scene","THREE","camera","window","innerWidth","innerHeight","renderer","antialias","setSize","geometry","material","color","cube","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","current","replaceChildren","domElement","ref","style","padding","Slider","progress","value","min","max","step","onChange","enableAllPlugins","createCounterDictSlice","set","get","api","counter_dict","Map","add1","name","produce","state","useStoreZustand","create","OneStore","v1","useControls","Array","from","num","App","display_i","setDisplay_i","display_items","item","className","Dropdown","title","activeKey","top","left","onSelect","eventKey","map","index","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acad454e.chunk.js","sourcesContent":["import React, {FC, useEffect, useRef, useState} from 'react';\r\nimport \"rsuite/dist/rsuite.min.css\";\r\nimport * as THREE from \"three\";\r\nimport {Slider} from \"rsuite\";\r\n\r\nexport const MyCanvas: FC = () => {\r\n\r\n    const [v, setV] = useState(5);\r\n    const canvas = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n\r\n        const renderer = new THREE.WebGLRenderer({antialias: true});\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        const geometry = new THREE.BoxGeometry();\r\n        const material = new THREE.MeshBasicMaterial({color: new THREE.Color(0.1 * v, 0.1 * v, 0.1 * v)});\r\n        const cube = new THREE.Mesh(geometry, material);\r\n        const animate = function () {\r\n            requestAnimationFrame(animate);\r\n\r\n            cube.rotation.x = v;\r\n            cube.rotation.y = v;\r\n\r\n            renderer.render(scene, camera);\r\n        };\r\n\r\n        scene.add(cube);\r\n\r\n        camera.position.z = v;\r\n\r\n        animate();\r\n        canvas.current?.replaceChildren(renderer.domElement);\r\n\r\n\r\n    }, [canvas, v]);\r\n\r\n    return (\r\n        <div>\r\n            <div ref={canvas}/>\r\n            <div style={{padding: \"50px 50px 50px 50px\"}}>\r\n                <Slider\r\n                    progress\r\n                    value={v}\r\n                    min={5}\r\n                    max={10}\r\n                    step={0.01}\r\n                    onChange={value => {\r\n                        setV(value);\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {StateCreator} from \"zustand\"\r\nimport {ZustandState} from \"../useStoreZustand\";\r\nimport produce, {enableAllPlugins} from \"immer\";\r\n\r\nexport interface CounterDictSlice {\r\n    counter_dict: Map<string, number>,\r\n    add1: (name: string) => void,\r\n}\r\n\r\nenableAllPlugins();\r\n\r\nconst createCounterDictSlice: StateCreator<ZustandState> = (\r\n    set,\r\n    get,\r\n    api) => ({\r\n    counter_dict: new Map<string, number>(),\r\n    add1: (name: string) => {\r\n        set(produce<CounterDictSlice>(state => {\r\n            state.counter_dict.set(name, (state.counter_dict.get(name) ?? 0) + 1);\r\n        }));\r\n    },\r\n});\r\n\r\nexport default createCounterDictSlice;","import create from \"zustand\";\r\nimport createCounterDictSlice, {CounterDictSlice} from \"./Slices/CounterDictSlice\";\r\n\r\nexport type ZustandState = CounterDictSlice;\r\n\r\nconst useStoreZustand =\r\n    create<ZustandState>(((\r\n        set,\r\n        get,\r\n        api) => (\r\n        {\r\n            ...createCounterDictSlice(set, get, api),\r\n        })));\r\n\r\nexport default useStoreZustand;","import useStoreZustand from \"./useStoreZustand\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useControls} from \"leva\";\r\n\r\nexport const OneStore = () => {\r\n    const {counter_dict, add1} = useStoreZustand();\r\n    const {v1} = useControls({v1: {min: 0, max: 10, value: 1}});\r\n\r\n\r\n    useEffect(() => {\r\n        add1(\"On Once Effect\")\r\n    }, [add1]);\r\n\r\n    useEffect(() => {\r\n        add1(\"On v1 change\")\r\n    }, [v1]);\r\n\r\n\r\n    return <div>\r\n        <h1>Show the num of rendering:</h1>\r\n        {Array.from(counter_dict,\r\n            ([name, num]) =>\r\n                <h3>{name}: {num}</h3>)}\r\n    </div>;\r\n}","import React, {useState} from 'react';\nimport \"rsuite/dist/rsuite.min.css\";\nimport './App.css';\nimport {MyCanvas} from \"./Labs/Three/MyCanvas\";\nimport {Dropdown} from \"rsuite\";\nimport {OneStore} from \"./Labs/States/ZustandStore/ZustandLab\";\n\nfunction App() {\n\n    const [display_i, setDisplay_i] = useState(1);\n    const display_items = ([\n        {name: \"plain THREE canvas\", item: <MyCanvas/>},\n        {name: \"Zustand\", item: <OneStore/>},\n    ]);\n\n    return (\n        <div className=\"App\">\n            <Dropdown\n                title={display_items[display_i].name}\n                activeKey={display_i}\n                style={{position: \"fixed\", top: \"5%\", left: \"5%\"}}\n                onSelect={eventKey => {\n                    setDisplay_i(eventKey);\n                }}\n            >\n                {display_items.map((value, index) =>\n                    <Dropdown.Item key={index} eventKey={index}>{value.name} </Dropdown.Item>)}\n            </Dropdown>\n            {display_items[display_i].item}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}